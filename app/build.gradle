apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply from: "$rootDir/gradle/helpers/common-methods.gradle"

Properties semver = new Properties()
semver.load(new FileInputStream(file("semver.properties")))

def buildTimeMillis = System.currentTimeMillis()
def buildVersionCode = computeVersionCode(semver['major'], semver['minor'], semver['patch'], semver['build'])
def buildVersionName = computeVersionName(semver['major'], semver['minor'], semver['patch'])
def buildTime = computeBuildTimeFormatted(buildTimeMillis)
def buildRevision = computeRevision()

ant.propertyfile(file: "version.properties") {
    entry(key: "version", value: buildVersionName)
    entry(key: "versionCode", value: buildVersionCode)
    entry(key: "rev", value: buildRevision)
    entry(key: "buildTime", value: buildTime)
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.tinashe.weather"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode buildVersionCode
        versionName buildVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "URL_BASE", '"https://api.darksky.net"'
        buildConfigField "String", "API_SECRET", System.getenv("DARK_SKY_API_SECRET") ?: DARK_SKY_API_SECRET
        manifestPlaceholders = [apiKey   : System.getenv("FABRIC_API_KEY") ?: FABRIC_API_KEY,
                                placesKey: System.getenv("PLACES_API_KEY") ?: PLACES_API_KEY]

        buildConfigField "String", "CLEAR_DAY", System.getenv("CLEAR_DAY") ?: CLEAR_DAY
        buildConfigField "String", "CLEAR_NIGHT", System.getenv("CLEAR_NIGHT") ?: CLEAR_NIGHT
        buildConfigField "String", "CLOUD_NIGHT", System.getenv("CLOUD_NIGHT") ?: CLOUD_NIGHT
        buildConfigField "String", "RAIN_DAY", System.getenv("RAIN_DAY") ?: RAIN_DAY
        buildConfigField "String", "RAIN_NIGHT", System.getenv("RAIN_NIGHT") ?: RAIN_NIGHT
        buildConfigField "String", "LIGHTNING_DAY", System.getenv("LIGHTNING_DAY") ?: LIGHTNING_DAY
        buildConfigField "String", "LIGHTNING_NIGHT", System.getenv("LIGHTNING_NIGHT") ?: LIGHTNING_NIGHT
        buildConfigField "String", "SNOW_DAY", System.getenv("SNOW_DAY") ?: SNOW_DAY
        buildConfigField "String", "SNOW_NIGHT", System.getenv("SNOW_NIGHT") ?: SNOW_NIGHT
        buildConfigField "String", "CLOUD_DAY", System.getenv("CLOUD_DAY") ?: CLOUD_DAY
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE") ?: "keystore.jks")
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEYSTORE_PASSWORD")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    androidExtensions {
        experimental = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"

    implementation "androidx.appcompat:appcompat:${versions.androidx}"
    implementation "androidx.cardview:cardview:${versions.androidx}"
    implementation "androidx.recyclerview:recyclerview:${versions.androidx}"
    implementation "com.google.android.material:material:${versions.androidx}"

    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.lifecycle:lifecycle-reactivestreams:2.0.0'
    kapt 'androidx.lifecycle:lifecycle-compiler:2.0.0'

    implementation 'androidx.room:room-rxjava2:2.1.0-alpha01'
    kapt 'androidx.room:room-compiler:2.1.0-alpha01'

    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    implementation "io.reactivex.rxjava2:rxjava:${versions.rx_java}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rx_android}"

    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp3}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp3}"

    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"

    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    implementation "com.github.bumptech.glide:recyclerview-integration:${versions.glide}"
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"

    implementation "com.google.android.gms:play-services-location:${versions.play_services}"
    implementation "com.google.android.gms:play-services-places:${versions.play_services}"

    implementation "com.jakewharton.timber:timber:${versions.timber}"

    implementation "com.airbnb.android:lottie:${versions.lottie}"

    implementation 'com.android.billingclient:billing:1.1'

    implementation 'com.jakewharton.threetenabp:threetenabp:1.1.0'

    implementation('com.crashlytics.sdk.android:crashlytics:2.9.4@aar') {
        transitive = true
    }

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.mockito:mockito-inline:${versions.mockito}"
    testImplementation 'androidx.arch.core:core-testing:2.0.0'
    testImplementation "com.nhaarman:mockito-kotlin:1.5.0"
}

afterEvaluate {
    createFabricProperties()
}

def createFabricProperties() {
    def propertiesFile = file('fabric.properties')
    def commentMessage = "This is an autogenerated fabric properties file to prevent key to be committed to source control."
    ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
        entry(key: "apiSecret", value: System.getenv('FABRIC_API_SECRET') ?: FABRIC_API_SECRET)
        entry(key: "apiKey", value: System.getenv('FABRIC_API_KEY') ?: FABRIC_API_KEY)
    }
}